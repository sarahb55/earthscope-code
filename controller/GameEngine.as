package earthscope.controller{		import flash.utils.Timer;	import flash.events.TimerEvent;	import flash.events.Event;	import flash.utils.getTimer;	import flash.display.Stage;	import flash.display.Sprite;	import flash.display.MovieClip;	import flash.text.TextField;	import flash.media.Sound;	import flash.media.SoundLoaderContext;	import flash.net.URLRequest;	import flash.text.TextFieldAutoSize;		import earthscope.models.VolcanoData;	import earthscope.events.VolcanoEruptsEvent;	import earthscope.views.AbstractDataView;	import earthscope.views.MayorScreenViewStart;	import earthscope.views.VolcanoView;	import earthscope.models.*;	import earthscope.text.GameText;	import earthscope.utils.SoundPlayer;	import earthscope.utils.GameButton;	import earthscope.views.*;		import earthscope.events.StartGameEvent;	import flash.events.MouseEvent;	import earthscope.models.EmailData;	import earthscope.utils.SoundPlayer;			public class GameEngine extends Sprite {       			   private var _timer:Timer; 	   private var _volcano:VolcanoData;	  	   private var _mayor:MayorData;	   private var _pause = true;	   private var _volcano_mc:MovieClip; 	   private var _debug:TextField;	   	   private var _time_elapsed = 0;	   private var _hours = 0;	   private var _town:TownData;	  // private var _monitor:MonitorData;	  // private var _seismicityMonitor:SeismicityMonitorData;	   private var _phoneRinging:Sound;	   private var _answered:Boolean = false;	  	   public static var MAX_TICKS:Number = 24*14;	   private var _playerWins = false;	   private var _player:SoundPlayer;	   private var _gameStarted:Boolean = false;	   private var _advisorCount:Number = 0;	   private var _backgroundSounds:SoundPlayer = new SoundPlayer();	   	   	   private var _score:TextField;	   	   private var _monitor:MonitorData;	  	   private var _gameView:GameEngineView;	   private var _welcomeView:WelcomeScreenView;	   private var _allScreenView:GlobalScreenView;	   private var _monitorScreenView:MonitorScreenView;	   private var _mayorScreenViewStart:MayorScreenViewStart;	   private var _volcanoView:VolcanoView;	   private var _officeScreenView:OfficeScreenView;	   private var _phoneScreenZoomView:PhoneZoomScreenView;	   private var _evacuationScreenView:EvacuationScreenView;	   private var _finalScreen:FinalScreenView;	   	   private var _welcomeStartBtn:GameButton;	   private var _welcomeQuitBtn:GameButton;	   private var _wrapup:Boolean = false;	   private var _emailData:EmailData;	   private var _pressConference:PressConferenceData; 	   private var _handbook:HandbookData;	  	   	   	  /* public function GameEngine(volcano_mc:MovieClip, volcano:VolcanoData, town:TownData){         						if(volcano_mc == null){				trace("did not pass clip pointer...");			}						_volcano_mc = volcano_mc;			_volcano_mc.stop();						if(volcano == null){				trace("did not pass volcano pointer...");			}			_volcano = volcano;			_town = town;			initGame();        }*/				public function GameEngine(){         					initGame();        }				public function initGame(){						_gameStarted = false;			_playerWins = false;			_advisorCount = 0;			_time_elapsed = 0;		    _hours = 0;			_pause = true;			_answered = false;						_backgroundSounds.loadSound("sounds/background.mp3");												_volcano = new VolcanoData();			_emailData = new EmailData();			_town = new TownData(_emailData );			_mayor = new MayorData(_emailData);			_monitor = new MonitorData();						_timer = new Timer(400, MAX_TICKS);			_timer.addEventListener(TimerEvent.TIMER, updateGame);			_timer.stop();						_town.setVolcano(_volcano);			_town.setMayor(_mayor);						_mayor.setVolcano(_volcano);			_mayor.setTown(_town);						_monitor.setVolcano(_volcano);			_monitor.setTownData(_town);			_monitor.setMayor(_mayor);						_volcano.town = _town;												_gameView = new GameEngineView(this);			_welcomeView = new WelcomeScreenView(this);			_allScreenView = new GlobalScreenView(this);			_monitorScreenView = new MonitorScreenView(this, _monitor);			_pressConference = new PressConferenceData("text/pressConference.xml", _town);			_handbook = new HandbookData(_town);			_volcanoView = new VolcanoView(_volcano);			_officeScreenView = new OfficeScreenView(this, _volcanoView, _volcano, _town, _mayor, _allScreenView, _gameView, _emailData, _monitor, _pressConference, _handbook);			_phoneScreenZoomView = new PhoneZoomScreenView(this, _town);			_evacuationScreenView = new EvacuationScreenView(this, _volcanoView);			_finalScreen = new FinalScreenView(this);						_debug = new TextField();			_debug.x = 40;			_debug.y = 460;			_debug.width = 860;			_debug.height = 160;			_debug.text = "Starting new game...";			//addChild(_debug);						setDebugField(_debug);						_debug.textColor = 0x000000;			_debug.wordWrap = true;			_debug.autoSize = TextFieldAutoSize.LEFT;			_debug.mouseWheelEnabled = true;			_debug.addEventListener(Event.SCROLL, onScroll);									//So if player plays again mayor data is saved			initMayorScreen();								}				public function onScroll(Event):void{						_debug.scrollV += 1;		}				public function restartGame(){									initGame();		}				public function onEnterWelcomeScreen(){						trace("on welcome");			addChild(_welcomeView);			addChild(_allScreenView);			_welcomeView.onEnterWelcomeScreen();						_backgroundSounds.play(0,100);					}								private function initMayorScreen():void{						if(_mayorScreenViewStart == null){								_mayorScreenViewStart = new MayorScreenViewStart(this, _mayor);			}					}							public function onExitWelcomeScreen(){			removeChild(_welcomeView );			removeChild(_allScreenView);		}				public function onEnterDesignMayorScreen(){									addChild(_mayorScreenViewStart);			addChild(_allScreenView);			_mayorScreenViewStart.onEnterDesignMayorScreen();								}				public function onExitDesignMayorScreen(){						removeChild(_mayorScreenViewStart);			removeChild(_allScreenView);			_mayor = _mayorScreenViewStart.mayor;			onEnterGameScreen();						//trace("Returning Mayor...");			//trace(_mayor.hair + " " +  _mayor.clothes + " "  + _mayor.gender);								}				public function onEnterMonitorScreen():void{						addChild(_monitorScreenView);			//addChild(_gameView);			addChild(_allScreenView);			_monitorScreenView.onEnterMonitorScreen();				}				public function onExitMonitorScreen():void{						removeChild(_monitorScreenView);			//removeChild(_gameView);			removeChild(_allScreenView);											}				public function onEnterGameScreen():void{						_officeScreenView.mayor = _mayor;				addChild(_officeScreenView);			//addChild(_gameView);			//addChild(_allScreenView);			_officeScreenView.onEnterGameScreen();						}				public function onExitGameScreen(){						removeChild(_officeScreenView);						//removeChild(_gameView);			//removeChild(_allScreenView);								}				public function onEnterPhoneZoomScreen():void{						addChild(_phoneScreenZoomView);			addChild(_gameView);			addChild(_allScreenView);			_phoneScreenZoomView.onEnterPhoneZoomScreen();		}				public function onExitPhoneZoomScreen():void{			removeChild(_phoneScreenZoomView);			removeChild(_gameView);			removeChild(_allScreenView);		}				public function onEnterIslandFromADistanceScreen():void{						addChild(_evacuationScreenView);			addChild(_allScreenView);			_evacuationScreenView.onEnterIslandFromADistanceScreen();					}				public function onExitIslandFromADistanceScreen():void{						removeChild(_evacuationScreenView);			removeChild(_allScreenView);					}				public function onEnterFinalScreen():void{									addChild(_finalScreen);			addChild(_allScreenView);			_finalScreen.onEnterFinalScreen();			_timer.stop();					}				public function onExitFinalScreen():void{						removeChild(_finalScreen);			removeChild(_allScreenView);			//removeChild(_debug);		}										public function set gameStarted(val:Boolean){			_gameStarted = val;		}				public function get gameStarted():Boolean{						return _gameStarted;		}				public function setDebugField(text_field:TextField):void{						_debug = text_field;			_debug.text = "Testing 1, 2, 3....";			_volcano.setDebugField(_debug);			_town.setDebugField(_debug);			_monitor.setDebugField(_debug);			_mayor.setDebugField(_debug);								}				public function cancelVolcanoEvacuationWarning(){						_mayor.cancelVolcanoEvacuationWarning();		}		public function pause(){									_pause = true;			_timer.stop();					}				public function getVideoFileName():String{						return _monitor.getVideoFile();					}				public function stop(){			_pause = false;			_timer.stop();		}				public function start(){								if(_pause == true){				_pause = false;				_timer.start();				}						}				public function issueVolcanoEvacuationWarning(){			_debug.appendText("Town issued an evacuation warning by mayor. \n");			_mayor.issueEvacuationWarning();						 //onExitGameScreen();			 //onEnterMonitorScreen();					}				public function get warned():Boolean{			return _town.warned;		}				public function evacuateTown(){						_debug.appendText("Town ordered to evacuate... \n");			_mayor.evacuateTown();			stop();						 //onExitGameScreen();			 //onEnterMonitorScreen();								}				public function get playerWins(){						if(_town.evacuated == true){								_playerWins = true;				_debug.appendText("Player wins! \n");											}						return _playerWins;					}				public function onPlayerLoses(){						 onExitGameScreen();			 onEnterFinalScreen();								}				public function requestScienceAdvisor(){						_advisorCount++;			_mayor.requestScienceAdvisor();			 onExitGameScreen();			 onEnterMonitorScreen();					}				public function requestSeismologyAdvisor(){						if(_advisorCount < 2){				_advisorCount++;				_mayor.requestScienceAdvisor();			}			else{				_mayor.requestSeismologyAdvisor();							}									 		}				public function requestGPSAdvisor(){						if(_advisorCount < 2){				_advisorCount++;				_mayor.requestScienceAdvisor();			}			else{				_mayor.requestGPSAdvisor();							}					}				public function ringing(){			return !_answered;		}				public function get gameTime():String{						var txt:String = new String();			var hours:int = Math.round(_timer.currentCount*GameText.HOURS_PER_TICK);			var day:Number = hours/GameText.HOURS_PER_DAY;			day = Math.floor(day);			var hour:Number = hours % GameText.HOURS_PER_DAY;			var dayTxt:String;			var hourTxt:String;						if(day < 10){								dayTxt = "0" + day.toString();			}			else{				dayTxt = day.toString();			}			if(hour < 10){				hourTxt = "0" + hour.toString();			}			else{								hourTxt = hour.toString();			}									txt = "DAY: <font color=\"0xcc0000\">" + dayTxt+ " </font>HOUR: <font color=\"red\">" + hourTxt;									return txt;								}				public function get popularityText():String{						var txt:String = new String();			txt = "";			var val:int = Math.round(_mayor.popularity/10.0);			for(var i:int = 0; i < val; i++){								txt += "Y";			}			trace("pop " + txt + _mayor.popularity + " " + val);						return txt; //_mayor.popularity.toString();		}				public function get moneyText():String{						 var txt:String = new String();			 txt = "";			 var val:int = Math.round(_town.money/5000);			 			 if(val > 10){				 				val = 10; 			 }			 for(var i:int = 0;  i < val; i++){								txt += "$";			}						trace("money " + txt);			return txt; //_town.money.toString();					}				public function get prepardnessText():String{						var txt:String = new String();			txt = "";			var val:int = Math.round(_town.preparation/10.0);			val += 1;			for(var i:int = 0; i < val; i++){								txt += "v";			}						trace("prep " + txt);			return txt; //val.toString();					}						public function getGameInfo():String{						var txt:String = new String();			var hours:int = Math.round(_timer.currentCount*GameText.HOURS_PER_TICK);			var day:Number = hours/GameText.HOURS_PER_DAY;			day = Math.floor(day);			var hour:Number = hours % GameText.HOURS_PER_DAY;			var dayTxt:String;			var hourTxt:String;						if(day < 10){								dayTxt = "0" + day.toString();			}			else{				dayTxt = day.toString();			}			if(hour < 10){				hourTxt = "0" + hour.toString();			}			else{								hourTxt = hour.toString();			}															 txt += "% BUDGET: " 			 for(var i:int = 0; i++; i < (_town.money % 10)){								txt += "$ ";			}						for(i = 0; i++; i < (_town.preparation % 10)){								txt += "a ";			}												if(_town.warned){								txt += " EVACUATION WARNING IN EFFECT";			}			else{				txt += " NO EVACUATION WARNING ISSUED";			}						return txt;					}								public function get score():Number{						var score:Number = 10*_mayor.popularity + 5*_town.money/5000 + 20*_town.preparation;						trace("score = " + score + " _town.preparation " + _town.preparation);			if(_volcano.percentComplete < 90){				score +=  10*_volcano.percentComplete;			}			else if(_town.evacuated == false){				score = 0;			}									return Math.round(score);		}				private function updateGame(event:TimerEvent)		{									var hours:int = Math.round(_timer.currentCount*GameText.HOURS_PER_TICK);			var day:Number = hours/GameText.HOURS_PER_DAY;			day = Math.floor(day);			var hour:Number = hours % GameText.HOURS_PER_DAY;						_gameView.updateText(this.gameTime);						if(_timer.currentCount % 3 == 0 ){				_debug.text = "";			}						_debug.appendText(getGameInfo());			_debug.scrollV = _debug.maxScrollV;			_volcano.tick(_timer.currentCount);			_town.tick(_timer.currentCount);			_mayor.tick(_timer.currentCount);			_emailData.tick(_timer.currentCount);						if(_volcanoView != null && !_pause)			{				_volcanoView.updateDisplay();			}			else{				_debug.appendText("Game paused.\n");			}									if(_officeScreenView.parent == this){								_officeScreenView.buildScoreBar();							}								}		    }}