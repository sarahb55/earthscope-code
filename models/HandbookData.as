package earthscope.models{		 import flash.events.EventDispatcher;import flash.events.Event;import earthscope.events.GameEvent;import earthscope.utils.LoadXMLFile;import earthscope.models.*;import flash.events.*;import flash.net.*;import flash.utils.*;public class HandbookData extends GameData{		private var _volcanoXML:XML = new XML();	private var _seismoGpsXML:XML = new XML();	 private var dataFormat:String = URLLoaderDataFormat.TEXT;	 private var _town:TownData;		public function HandbookData(town:TownData){			super();			init(town);					}					private function init(town:TownData):void{				_town  = town;			}		public function completeVideo():void{				_town.changePrepardness(+10);	}		public function clickLink():void{				_town.changePrepardness(+0.5);	}		public function LoadXMLFile (file:String) {            			var source:String = file;			var loader:URLLoader = new URLLoader();            loader.dataFormat = dataFormat;            configureListeners(loader);            var request:URLRequest = new URLRequest(source);            try {                loader.load(request);				            } catch (error:Error) {				                trace("Error loading requested document: " + source);            }        }        private function configureListeners(dispatcher:URLLoader):void {            dispatcher.addEventListener(Event.COMPLETE, completeHandler);            dispatcher.addEventListener(Event.OPEN, openHandler);            dispatcher.addEventListener(ProgressEvent.PROGRESS, progressHandler);            dispatcher.addEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler);            dispatcher.addEventListener(HTTPStatusEvent.HTTP_STATUS, httpStatusHandler);            dispatcher.addEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler);        }						        private function completeHandler(event:Event):void {            var loader:URLLoader = URLLoader(event.target);            switch(loader.dataFormat) {                case URLLoaderDataFormat.TEXT :                    trace("completeHandler (text): " + loader.data);                    break;                case URLLoaderDataFormat.BINARY :                    trace("completeHandler (binary): " + loader.data);                    break;                case URLLoaderDataFormat.VARIABLES :                    trace("completeHandler (variables): " + loader.data);                    break;            }						try{								_volcanoXML = new XML(event.target.data);			}			catch(e:TypeError){								trace("Could not parse into xml");				trace(e.message);							}        }        private function httpStatusHandler(event:Event):void {            trace("httpStatusHandler: " + event);        }        private function ioErrorHandler(event:IOErrorEvent):void {            trace("ioErrorHandler: " + event);        }        private function openHandler(event:Event):void {            trace("openHandler: " + event);        }        private function progressHandler(event:ProgressEvent):void {            trace("progressHandler loaded:" + event.bytesLoaded + " total: " + event.bytesTotal);        }        private function securityErrorHandler(event:SecurityErrorEvent):void {            trace("securityErrorHandler: " + event);        }			}}