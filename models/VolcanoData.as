package earthscope.models{	   import flash.text.TextField;   import flash.events.Event;   import earthscope.events.GameEvent;   import earthscope.events.PuffOfSmokeEvent;   import earthscope.events.RumbleEvent;    import earthscope.events.VolcanoEruptsEvent;   import earthscope.events.ScientistOnNewsEvent;   import earthscope.events.ApparentQuietEvent;   import earthscope.events.VolcanoWakesUpEvent;   import earthscope.text.GameText;		public class VolcanoData extends GameData{				private var _debug:TextField;		private var _view = false;		private var _ticks:Number = 0;		private var _daysToEruption:Number = 7;		private var _percentComplete:Number = 0;		private var _hoursPerTick:Number = 1.0;		private var _ticksToLive:Number = 1;		private var _hoursPerDay:Number = 24;		private var _percent:Number = 0.0;		private var _calmVolcano:Number = 0.5;		private var _moreActive:Number = 0.75;		private var _scientistOnNews:Boolean = false;		private var _puffCount:int = 0;		private var _rumble:Boolean = false;		private var _array:Array = new Array();		private var _volcanoActivity:Boolean = false;		private var _numTimesVolcanoQuietChecked:int = 0;		private var _townData:TownData;		private var _volcanoWakes:Boolean = false;								public function VolcanoData(){			trace("Making a new volcano.");			var num:Number = Math.random();			trace(num);			_daysToEruption = 7.0*num + 7.0;			trace("Days to Eruption" + _daysToEruption);			_ticksToLive = Math.round(_daysToEruption*_hoursPerTick*_hoursPerDay*1.0);			trace("Ticks: " + _ticksToLive);					}				public function set town(t:TownData){						_townData = t;					}				override public function tick(tick:Number): void		{						trace("Updating the volcano variables. ...  " + tick + "...  ");						_ticks++;						_percentComplete = 100.0*_ticks/_ticksToLive;			if(_volcanoWakes == false){				_array.push(1.0);			}			else{				_array.push(_percentComplete);			}						trace(_percentComplete);						if(_percentComplete < GameText.MIN_VOLCANO_STATE_FOR_VOLCANO_WAKES){								return;			}						_volcanoActivity = true;						if(_percentComplete >= GameText.MIN_VOLCANO_STATE_FOR_VOLCANO_WAKES && _volcanoWakes == false){								trace("Volcano wakes up event detected");				_volcanoWakes = true;				_volcanoActivity = true;				dispatchEvent(new VolcanoWakesUpEvent(VolcanoWakesUpEvent.VOLCANO_WAKES_UP));				dispatchEvent(new PuffOfSmokeEvent(PuffOfSmokeEvent.PUFF_OF_SMOKE));				dispatchEvent(new RumbleEvent(RumbleEvent.RUMBLE) );								return;			}						trace("Volcano percent complete = " + Math.round(_percentComplete*100)/100.0 + "....  "); 						testForPuff();			testForRumble();						if(_percentComplete > GameText.MAX_GAME_VARIABLE){								trace("Volcano erupts");				dispatchEvent(new VolcanoEruptsEvent(VolcanoEruptsEvent.VOLCANO_ERUPTS));											}						/*if(_percentComplete >= GameText.SCIENTIST_EVENT_TRIGGERS && !_scientistOnNews){												dispatchEvent(new ScientistOnNewsEvent(ScientistOnNewsEvent.ADVISOR));				_scientistOnNews = true;					}*/						var num:Number = Math.random();			/*			if(_percentComplete > GameText.MIN_VOLCANO_STATE_FOR_VOLCANO_QUIETS &&			   _numTimesVolcanoQuietChecked < GameText.NUM_TIMES_TEST_FOR_VOLCANO_QUIETS && 			   num < GameText.PROBABILITY_VOLCANO_QUIETS){								dispatchEvent(new ApparentQuietEvent(ApparentQuietEvent.VOLCANO_APPARENT_QUIET));				_numTimesVolcanoQuietChecked++;				_volcanoActivity = false;			}*/																	}				public function get array():Array{						return _array;					}				public function get activity():Boolean{						return _volcanoActivity;		}				public function get percentComplete():Number{						if(_volcanoActivity == false){				return 1.0;			}			return _percentComplete;		}				public function get ticksToLive():Number{						return _ticksToLive;		}				public function getRumble():Boolean{						return _rumble;		}				private function testForPuff(){						var num:Number;			num = Math.random();									if(100*num < _percentComplete/3.0 && _rumble && _volcanoActivity == true){ //Boolean value set after first rumble								dispatchEvent(new PuffOfSmokeEvent(PuffOfSmokeEvent.PUFF_OF_SMOKE));				trace("puff dispatched...");				_debug.appendText( "Puff of smoke event dispatched....  ");				_view = true;							}		}				public function clamp(num:Number):Number{			var retVal:Number = 0;						if(num > GameText.MAX_GAME_VARIABLE){								retVal = GameText.MAX_GAME_VARIABLE;							}			else if(num < GameText.MIN_GAME_VARIABLE){								retVal = GameText.MIN_GAME_VARIABLE;			}			else{								retVal = num;							}						return retVal;					}				private function testForRumble(){			var num:Number;			num = Math.random();						if(num*100 < _percentComplete && _volcanoActivity == true){				dispatchEvent(new RumbleEvent(RumbleEvent.RUMBLE) );				_debug.appendText("Rumble event dispatched....  ");				_rumble = true;							}								}						public function setDebugField(text_field:TextField){			_debug = text_field;			//_debug.text =  "Adding second debug field";					}				override public function updateView():Boolean		{			return _view;		}			}			}					