package earthscope.utils{		import flash.display.Sprite;	import flash.display.Shape;    import flash.geom.Rectangle;    import flash.events.MouseEvent;	import flash.text.TextField;	import flash.text.TextFieldAutoSize;    import flash.text.TextFormat;	import flash.text.Font;	import flash.ui.Mouse;	import flash.filters.BevelFilter;	import flash.filters.BitmapFilterQuality;	import flash.filters.BitmapFilterType;	import flash.net.URLRequest;	import flash.utils.Timer;	import flash.events.TimerEvent;		public class GPSGrapher extends Sprite{						private var nWidth:Number = 300;		private var nHeight:Number = 200;		private var nZeroX:Number = 30;		private var nZeroY:Number = 30;		private var xTop:Number = 0;		private var yTop:Number = 0;		private var xText:TextField = new TextField();		private var yText:TextField = new TextField();		private var labelTxt:TextField = new TextField();		private var format:TextFormat = new TextFormat();		private var myFont:Font = new Arial();		private var xMin:Number = 0;		private var xMax:Number = 108;		private var yMin:Number = 0;		private var yMax:Number = 150;		private var nMaxDays:Number = 10;		private var inc:Number = Math.round(nWidth/nMaxDays) - 2;		private var hourPerDay :Number = 24.0;						private var sBackground:Sprite = new Sprite();				public function GPSGrapher(w:Number=300, h:Number=200){			trace("Creating a GPS graph");			nWidth = w;			nHeight = h;			inc= Math.round(nWidth/nMaxDays) - 2;			drawBackground();			addChild(sBackground);			super();						nZeroX = nWidth/15;			nZeroY = nZeroX;						buttonMode = true;			useHandCursor = true;			mouseChildren = false;					}				public function clampX(xVal):Number{						if(xVal > xMax){										xVal = xMax;			}			else if(xVal < xMin){										xVal = xMin;			}						return xVal;					}				public function clampY(yVal):Number{						if(yVal > yMax){										yVal = yMax;			}			else if(yVal < yMin){										yVal = yMin;			}						return yVal;					}				override public function set width(v:Number):void{						if(v > 0){				nWidth = v;				sBackground.width = v;			}									drawBackground();					}				var xPrev:Number = 0;		var yPrev:Number = 0;								public function plot(dataArray:Array):void{						//Step 1 array is an oblect array of -- (time,value)						drawBackground();						for(var i:Number = 0; i < dataArray.length - 1; ++i){				 				var xVal:Number = clampX(dataArray[i+1].x);				var yVal:Number = clampY(dataArray[i+1].y);												var xPos:Number = Math.round((clampX(xVal)/(xMax - xMin))*(nWidth - nZeroX) +  xTop + nZeroX);				var yPos:Number = Math.round(nHeight - ((clampY(yVal)/(yMax - yMin))*(nHeight - nZeroY) + nZeroY));								var xPrev:Number = Math.round((clampX(dataArray[i].x)/(xMax - xMin))*(nWidth - nZeroX) +  xTop + nZeroX);				var yPrev:Number = Math.round(nHeight - ((clampY(dataArray[i].y)/(yMax - yMin))*(nHeight - nZeroY) + nZeroY));								//trace(xPos + " " + yPos);								if(i > 1){					sBackground.graphics.moveTo(xPrev, yPrev);					sBackground.graphics.lineTo(xPos, yPos);				}								sBackground.graphics.lineStyle(1, 0xff00ff);				sBackground.graphics.drawCircle(xPos, yPos, 1);				sBackground.graphics.lineStyle(1, 0x0000ff);																			}												//Draw a small circle at that point						//Draw a line to the next point 					}				override public function set height(v:Number):void{						if(v > 0){				nHeight = v;				sBackground.height = v;							}									drawBackground();					}				private function drawBackground(){			graphics.clear();			sBackground.graphics.clear();			sBackground.graphics.lineStyle(0, 0xFFFF99);						sBackground.graphics.moveTo( xTop, yTop);						with(sBackground.graphics){								beginFill(0xFFFF99, 1);                drawRect(xTop, yTop, nWidth, nHeight);                endFill();							}		   			sBackground.graphics.lineStyle(1, 0xFF0000);			sBackground.graphics.moveTo( xTop + nZeroX, yTop);			sBackground.graphics.lineTo(xTop + nZeroX, yTop + nHeight - nZeroY);			sBackground.graphics.lineTo(xTop + nWidth, yTop + nHeight - nZeroY);			sBackground.graphics.moveTo( xTop, yTop);						sBackground.graphics.lineStyle(2, 0x0000ff);						labelTxt.text = "Now";						for(var i:Number = 1; i < nMaxDays; ++i){							sBackground.graphics.drawCircle( xTop + nZeroX + inc*i, yTop + nHeight - nZeroY, 1);				var pos:Number =  xTop + nZeroX + inc*i;				//trace(i + " " +  pos);								if(i == nMaxDays - 1){					sBackground.graphics.lineStyle(1, 0x9900ff);					sBackground.graphics.moveTo( xTop + nZeroX + inc*i, yTop + nHeight - nZeroY);					sBackground.graphics.lineTo(xTop + nZeroX + inc*i,  yTop +  nZeroY);					labelTxt.x = xTop + nZeroX + inc*i - 10;					labelTxt.y = yTop + nHeight - 13;					sBackground.graphics.drawCircle(xTop + nZeroX + inc*i,  yTop +  nZeroY,1);				}			}									format.font = myFont.fontName;			format.size = 9;									xText.x = xTop + nWidth/2 - 30;			xText.y = yTop + nHeight - 13;			xText.defaultTextFormat = format;			xText.text = "Hours";			sBackground.addChild(xText);			xText.embedFonts = true;						labelTxt.defaultTextFormat = format;			labelTxt.embedFonts = true;						sBackground.addChild(labelTxt);						yText.x = xTop + 1;			yText.y = yTop +2* nHeight/3 ;			yText.defaultTextFormat = format;			yText.text = "Position";			yText.width = 200;						sBackground.addChild(yText);			yText.embedFonts = true;			yText.rotation = 270;						sBackground.graphics.moveTo(xTop + nZeroX, yTop + nHeight - nZeroY);		}				public function clearGraph():void{						drawBackground();								}					}							}