package earthscope.utils{			import flash.display.Sprite;	import flash.text.TextField;	import flash.text.TextFormat;	import flash.text.StyleSheet;	import flash.events.MouseEvent;	import flash.text.TextFieldAutoSize;	import flash.display.Shape;	import flash.filters.DropShadowFilter;	import flash.geom.ColorTransform;	import earthscope.text.GameText;	import flash.text.Font;	import flash.text.AntiAliasType;	import earthscope.utils.DisplayGraphicsFiles;			public class GameButtonBamboo extends Sprite{								var _button:Sprite = new Sprite();		var _label:TextField = new TextField();		var _box:Shape = new Shape();		var format:TextFormat = new TextFormat();		var _disabled:Boolean = false;		var myFont:Font = new cancan();		var _back:DisplayGraphicsFiles;				public function GameButtonBamboo(x:int = 0, y:int = 0, width:int = 100, height:int = 50, label:String = "Label"){									  						trace("Creating new  GameButtonBamboo: " + label);									_label.text = label;									_back = new DisplayGraphicsFiles();			_back.loadFile(GameText.PICTURE_DIRECTORY + GameText.BUTTON_BACK);			_back.button = true;			_back.buttonMode = true;			addChild(_back);			_button.x = x;			_button.y = y;																						_button.buttonMode = true;			_button.useHandCursor = true;			_button.mouseChildren = false;						addChild(_button);			_button.addEventListener(MouseEvent.MOUSE_OVER, onMouseOver);			_button.addEventListener(MouseEvent.MOUSE_OUT, onMouseOut);			//_label.addEventListener(MouseEvent.MOUSE_OVER, onMouseOver);			//_label.addEventListener(MouseEvent.MOUSE_OUT, onMouseOut);			//_label.selectable = false;						_button.addChild(_back);			_back.addChild(_label);									formatText(x, y, width, height, label, _label, GameText.BROWN);			this.label = label;			//_label.embedFonts = true;								}				public function set disabled(val:Boolean):void{						_disabled = val;						if(_disabled == true){								onDisabled();								trace("button disabled");			}			else{								onEnabled();			}		}				public function get disabled():Boolean{						return _disabled ;		}					public function set label(label:String):void{						_label.text = label;						if(label.length <= 3){								_back.scaleX = 0.4;				_label.scaleX = 1/_back.scaleX;								if(label.length == 3){					_label.x = 100;				}				else{										_label.x = 120;				}													trace(label + " label.length = " + label.length + "_back.width = " + _back.width);						}			else if(label.length < 10){								_back.scaleX = 0.5;				_label.scaleX = 1/_back.scaleX;				_label.x = 100;											trace(label + " label.length = " + label.length + "_back.width = " + _back.width);			}			else{												_back.scaleX = 1.0;				_label.scaleX = 1.0;				_label.x = _back.width/6;				trace(label + " label.length = " + label.length + "_back.width = " + _back.width);								}												if(_disabled == true){								onDisabled();								trace("button disabled");			}			else{								onEnabled();			}		}				protected function formatText(x:int, y:int, width:int, height:int, value:String, textf:TextField, color:Object, hover:Boolean = false){						format = new TextFormat();			format.font = myFont.fontName;			format.size = 30;			format.color = color;			textf.y = 20;			textf.autoSize = TextFieldAutoSize.LEFT;			textf.selectable = false;			textf.defaultTextFormat = format;				textf.text = value;			textf.embedFonts = true;			textf.antiAliasType = AntiAliasType.ADVANCED;												textf.filters = null;			textf.text = value;															}				private function onDisabled(){						trace("button disabled");			format.color = 0xcccccc;			_label.setTextFormat(format);				_label.filters = null;								}				private function onEnabled():void{						trace("button enabled");			format.color = GameText.BROWN;			_label.setTextFormat(format);				_label.filters = null;								}				public function onMouseOver(MouseEvent):void{						if(_disabled == true){								return;			}						trace("onMouseOver");							var drop:DropShadowFilter = new DropShadowFilter();			var _filters:Array = [drop];			drop.color = 0x000000;			_label.filters = _filters;							 format.color = 0x993300;			_label.setTextFormat(format);						}				public function onMouseOut(MouseEvent):void{						if(_disabled == true){								return;			}						trace("onMouseOut");			format.color = GameText.BROWN;			_label.setTextFormat(format);				//_label.x -= 1;			//_label.y -= 1;						_label.filters = null;					}						   									}							}