package earthscope.utils{	    import flash.display.Sprite;    import flash.events.*;    import flash.net.*;	import flash.utils.*;    public class LoadXMLFile extends Sprite {        private var source:String = "TextFile.txt";        private var dataFormat:String = URLLoaderDataFormat.TEXT;		private var _xml:XML;		private var _indices:Array = new Array();                public function LoadXMLFile (file:String) {            			source = file;			var loader:URLLoader = new URLLoader();            loader.dataFormat = dataFormat;            configureListeners(loader);            var request:URLRequest = new URLRequest(source);            try {                loader.load(request);				            } catch (error:Error) {				                trace("Error loading requested document: " + source);            }        }        private function configureListeners(dispatcher:URLLoader):void {            dispatcher.addEventListener(Event.COMPLETE, completeHandler);            dispatcher.addEventListener(Event.OPEN, openHandler);            dispatcher.addEventListener(ProgressEvent.PROGRESS, progressHandler);            dispatcher.addEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler);            dispatcher.addEventListener(HTTPStatusEvent.HTTP_STATUS, httpStatusHandler);            dispatcher.addEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler);        }				public function randomSort(elementA:int, elementB:int):Number{			trace("random sort");			var val:Number = Math.random() - 0.5;			trace(val);			if(val < 0){				return 1;			}			else{								return -1;			}								}				        private function completeHandler(event:Event):void {            var loader:URLLoader = URLLoader(event.target);            switch(loader.dataFormat) {                case URLLoaderDataFormat.TEXT :                    trace("completeHandler (text): " + loader.data);                    break;                case URLLoaderDataFormat.BINARY :                    trace("completeHandler (binary): " + loader.data);                    break;                case URLLoaderDataFormat.VARIABLES :                    trace("completeHandler (variables): " + loader.data);                    break;            }						try{								_xml = new XML(event.target.data);				trace(_xml.email.length());			 				trace(_xml.email[0].body.@yesBtn);				trace(_xml.email[0].body.@noBtn);				trace(_xml.email[0].body);				trace(_xml.email[0].subject);				trace(_xml.email.length);								for (var i:int = 0; i < _xml.email.length(); i++){										_indices[i] = i;									}								_indices = _indices.sort(randomSort);												for (var j:int = 0; j < _xml.email.length(); j++){										trace(_indices.shift() + ", ");				}																		trace(_indices.length + ". ");										}			catch(e:TypeError){								trace("Could not parse into xml");				trace(e.message);							}        }				public function get xml():String{									return _xml.toXMLString();					}        private function httpStatusHandler(event:Event):void {            trace("httpStatusHandler: " + event);        }        private function ioErrorHandler(event:IOErrorEvent):void {            trace("ioErrorHandler: " + event);        }        private function openHandler(event:Event):void {            trace("openHandler: " + event);        }        private function progressHandler(event:ProgressEvent):void {            trace("progressHandler loaded:" + event.bytesLoaded + " total: " + event.bytesTotal);        }        private function securityErrorHandler(event:SecurityErrorEvent):void {            trace("securityErrorHandler: " + event);        }    }}