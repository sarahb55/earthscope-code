package earthscope.views{		import flash.utils.Timer;import flash.events.TimerEvent;import flash.events.Event;import flash.events.MouseEvent;import flash.display.Sprite;import fl.video.*;import flash.display.MovieClip;import flash.display.DisplayObject;import flash.ui.Mouse;import flash.events.*;import earthscope.utils.DisplayGraphicsFiles;import earthscope.text.GameText;import earthscope.views.OfficeScreenView;import flash.display.*;import flash.net.URLRequest;import flash.net.URLLoader;import flash.events.Event;					public class GPSSeismoView  extends Sprite{				private var _flvPlayer:FLVPlayback;		private var _x:int = GameText.BACK_X;		private var _y:int = GameText.BACK_Y;		private var _width:int = 880;		private var _height:int = 400;		private var _office:OfficeScreenView;		private var _islandMap:MovieClip = new IslandMap();        private var gutter:uint = 10;		private var _gpsReceivers:Array = new Array();		private var _seismo:Array = new Array();		private var _numGPS:int = 4;		private var _numSeismo:int = 4;		private var _ocean:Sprite = new Sprite();		private var _back:Sprite = new Sprite();		var curs:MovieClip = new Helicopter();		var myLoader3:Loader = new Loader();     				public function GPSSeismoView(office:OfficeScreenView){						_office = office;							for(var i:int = 0; i < _numGPS; i++){								_gpsReceivers.push(new GPSIcon());			}						for(var j:int = 0; j < _numSeismo; j++){								_seismo.push(new SeismoIcon());			}         			 			curs.mouseEnabled=false;											}				public function initGame(){						_islandMap.x = _x;			_islandMap.y = _y;			_islandMap.width = _width;			_islandMap.height = _height;						_islandMap.addEventListener(MouseEvent.ROLL_OUT,boardOut);			_islandMap.addEventListener(MouseEvent.ROLL_OVER,boardOver);					_islandMap.addEventListener(MouseEvent.MOUSE_MOVE,boardMove);									with (_ocean.graphics) {                				lineStyle(2, 0x000000);				beginFill(0x0099FF, 1.0);                drawRect(_x, _y, _width, _height);                endFill();			}						addChild(_ocean);			addChild(_islandMap);									_islandMap.addEventListener(MouseEvent.CLICK, dropGPS);						/*			var myRequest3:URLRequest = new URLRequest("HelicopterGame/helicopter.swf"); 			myLoader3.contentLoaderInfo.addEventListener(Event.COMPLETE, initListener) 			myLoader3.load(myRequest3); 															_flvPlayer = new FLVPlayback();									with (_back.graphics) {                				lineStyle(2, 0x000000);				beginFill(0x000000, 0.6);                drawRect(stage.x, stage.y, stage.width - 40, stage.height - 40);                endFill();			}						addChild(_back);			try{				_flvPlayer.source = GameText.MOVIES_DIRECTORY + "Cockpit_GPS.flv";			}			catch(e:Error){								_flvPlayer.source  = GameText.SCROLLING_TEXT;			}						_flvPlayer.x = _x;			_flvPlayer.y = _y;			_flvPlayer.width = _width;			_flvPlayer.height = _height;			_flvPlayer.skin = "SkinOverAll.swf";						addChild(_flvPlayer);			_flvPlayer.addEventListener(VideoEvent.COMPLETE, onVideo1Complete);			_flvPlayer.play();			*/					}				function initListener(e:Event):void{     			addChild(myLoader3);     			e.target.content.moonTxt.text="Hello world";					}						private function initSeismoVideo():void{						_flvPlayer = new FLVPlayback();						try{				_flvPlayer.source = GameText.MOVIES_DIRECTORY + "Cockpit_Seismo.flv";			}			catch(e:Error){								_flvPlayer.source  = GameText.SCROLLING_TEXT;			}						_flvPlayer.x = _x;			_flvPlayer.y = _y;			_flvPlayer.width = _width;			_flvPlayer.height = _height;			_flvPlayer.skin = "SkinOverAll.swf";						addChild(_flvPlayer);			_flvPlayer.addEventListener(VideoEvent.COMPLETE, onVideo2Complete);			_flvPlayer.play();											}				private function onVideo1Complete(VideoEvent){						removeChild(_flvPlayer);			_islandMap.x = _x;			_islandMap.y = _y;			_islandMap.width = _width;			_islandMap.height = _height;						_islandMap.addEventListener(MouseEvent.ROLL_OUT,boardOut);			_islandMap.addEventListener(MouseEvent.ROLL_OVER,boardOver);					_islandMap.addEventListener(MouseEvent.MOUSE_MOVE,boardMove);									with (_ocean.graphics) {                				lineStyle(2, 0x000000);				beginFill(0x0099FF, 1.0);                drawRect(_x, _y, _width, _height);                endFill();			}						addChild(_ocean);			addChild(_islandMap);									_islandMap.addEventListener(MouseEvent.CLICK, dropGPS);						//_office.endGPSSeismoGame();		}				private function onVideo2Complete(VideoEvent){						removeChild(_flvPlayer);			_islandMap.addEventListener(MouseEvent.CLICK, dropSeismo);									//_office.endGPSSeismoGame();		}						 /*When the user moves the mouse over spBoard, our custom pointer,curs, is added as a child  of the MainTimeline so it can now be visible.The regular mouse pointer is hidden and curs is placed at the mouseposition. In boardMove handler, curs will be made to follow the mouse.*/	function boardOver(e:MouseEvent):void {							this.addChild(curs);								curs.x=stage.mouseX;								curs.y=stage.mouseY;								Mouse.hide();					}	/*When the mouse moves away from spBoard, and the MainTimline contains cursas a child (this.contains(curs)) the child is removed andthe regular mouse pointer shows. The test, this.contains(curs), in thisexample is an overkill. In general, though, an attempt to remove nonexisting childrencauses an error.*/		function boardOut(e:MouseEvent):void {						if(this.contains(curs)){								this.removeChild(curs);								Mouse.show();							}			}		/*The next function is executed when the user moves the mouse over spBoard.The curs coordinates are set to those of the mouse,so curs follows the mouse. e.updateAfterEvent, which can be used with MOUSE_MOVE,causes the motion to appear smoother. Without e.updateAfterEvent(), the positionwould not be updated until the next frame. at 12 fps, it causes roughness.*/	function boardMove(e:MouseEvent):void {						curs.x=stage.mouseX;		                curs.y=stage.mouseY;								        e.updateAfterEvent();				}				private function dropGPS(event:MouseEvent){						for(var j:int; j < _gpsReceivers.length; j++){								if(_gpsReceivers[j].parent != this){										addChild(_gpsReceivers[j]);					_gpsReceivers[j].x = event.localX  + 50 ;					_gpsReceivers[j].y = event.localY + 135;										if(j == _gpsReceivers.length - 1){												_islandMap.removeEventListener(MouseEvent.CLICK, dropGPS);						_islandMap.addEventListener(MouseEvent.CLICK, dropSeismo);																	}										break;														}			}														}						private function dropSeismo(event:MouseEvent){						for(var j:int; j < _seismo.length; j++){								if(_seismo[j].parent != this){										addChild(_seismo[j]);															_seismo[j].x = event.localX + 50;					_seismo[j].y = event.localY + 135;															if(j == _seismo.length - 1){																		_office.endGPSSeismoGame();											}										break;				}			}							}		}}import flash.display.Sprite;import flash.display.MovieClip;	class CustomCursor extends MovieClip {    	var bgColor:uint = 0x333333;    var size:uint = 10;	var curs:MovieClip = new Helicopter();        public function CustomCursor() {        visible = false;        draw();    }        private function draw():void {      addChild(curs);    }}			