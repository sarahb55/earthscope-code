package earthscope.views{	//// This file control the user interface for the mayor's office. // // Features:// 	//	* Click on computer to get email//	* Clock on GPS to get interactive GPS display//	* Click on seimsmometer to get interactive seismometer display//	* Click on handbook to get Mayo's handbook//	* Click on parrot to get animation//	// Office has event listener's that display a pop-up box based on the state of the game.//	// //	import earthscope.controller.GameEngine;import earthscope.utils.AlertBox;import earthscope.events.VolcanoEruptsEvent;import earthscope.utils.SeismoGraph;import earthscope.utils.GPSMonitor;import earthscope.utils.GameButton;import earthscope.utils.SmallGameButton;import earthscope.utils.DisplayGraphicsFiles;import earthscope.utils.SoundPlayer;import earthscope.utils.PlayVideos;import earthscope.utils.GameAlertBox;import earthscope.text.GameText;import earthscope.utils.GameHelpBox;import earthscope.utils.TinyGameButton;import earthscope.events.*;import earthscope.views.VolcanoView;import earthscope.views.GlobalScreenView;import earthscope.views.MayorView;import earthscope.utils.GameScoreTextField;import earthscope.utils.GameValueTextField;import earthscope.utils.GameButtonBamboo;import earthscope.events.EmailUpdateEvent;import earthscope.events.GameEvent;import earthscope.models.*;import earthscope.views.EmailScreenView;import earthscope.views.GameEngineView;import earthscope.views.HandbookView;import earthscope.views.GPSSeismoView;import earthscope.views.PressConferenceView;import earthscope.utils.GPSSeismoGame;import earthscope.events.HelicopterGameOverEvent;import earthscope.utils.SeismoDriver;import earthscope.utils.GPSDriver;import earthscope.utils.SeismoGrapher;import earthscope.utils.GPSGrapher;import earthscope.utils.TinyGameButton;import earthscope.text.GameText;import flash.filters.DropShadowFilter;import flash.net.navigateToURL;import flash.net.URLRequest;import flash.system.System;import fl.transitions.Tween;import fl.transitions.TweenEvent;import fl.transitions.easing.*;import fl.transitions.*;import fl.transitions.easing.*;import flash.utils.Timer;import flash.events.TimerEvent;import flash.events.Event;import flash.events.MouseEvent;import flash.geom.Rectangle;import fl.video.*;import flash.geom.Rectangle;import flash.utils.Timer;import flash.text.TextField;import flash.display.MovieClip;import flash.text.Font;import flash.text.AntiAliasType;import flash.display.Sprite;import flash.text.TextField;import flash.text.TextFormat;import flash.text.StyleSheet;import flash.events.MouseEvent;import flash.text.TextFieldAutoSize;import flash.display.Shape;import flash.filters.DropShadowFilter;import flash.geom.ColorTransform;import flash.text.Font;import flash.text.AntiAliasType;				import flash.display.Sprite;	public class OfficeScreenView  extends Sprite{			/*Embedded fonts */				var wingFont:Font = new Wingdings2();  //Wingdins		var webFont:Font = new Webdings();	   //Webdings -- to embed a font create a textfield in the flash file with the font, 											   //go to library and choose new font -- then export for runtime sharing						/* Graphic files used to create office */		private var _back:DisplayGraphicsFiles; 		//back of office		private var _palm:DisplayGraphicsFiles; 		//palm tree		private var _computer:DisplayGraphicsFiles; 	//computer		private var _bobbleHead:DisplayGraphicsFiles; 	//bobble head		private var _parrot:MovieClip  = new Parrot();  //Movie clip -- this must be imported into the flash as a graphic, convert to symbol movie clip,														//export for sharing class name Parrot		private var _mailIcon:DisplayGraphicsFiles;		//Mail icon will be displayed when there is new mail		private var _handBook:DisplayGraphicsFiles;		//handbook that sits on desk		private var _seismo:SeismoGraph;				//This is the seismometer on the wall of the office - data updated from Volcano Data		private var _gpsMonitor:GPSMonitor;				//This displays the GPS data				private var seismoRect: Rectangle;				//Seismometer background		private var seismoBox:Sprite;										private var gpsRect:Rectangle;					//GPS background		private var gpsBox:Sprite;				private var _xVal:int;		private var _yVal:int;		private var _fadeWidth:int;		private var _fadeHeight:int;				private var _fadeBox:Sprite;				//Boxes used to fade in and out to transition between screens		private var _fadeRect:Rectangle;		var rectBox:Sprite = new Sprite();										//Bamboo borders		private var leftBorder:DisplayGraphicsFiles;		private var rightBorder:DisplayGraphicsFiles;		private var upperBorder:DisplayGraphicsFiles;		private var lowerBorder:DisplayGraphicsFiles;		private var _lowerBorder:DisplayGraphicsFiles;				/* Data Files */		private var _town:TownData;				//The program has a data file called TownData that stores information from the town. 												//User updates and game changes are stored in this object		private var _mayor:MayorData;			//Data related to the mayor. This includes information used to generate the Mayor's appearance.				private var _volcano:VolcanoData;		//Data about the volcano. 				private var _monitor:MonitorData;		//Monitor data determines which video the monitor should play based on the state of the game.				private var _emailData:EmailData;		//Hold emails and information related to email								private var _game:GameEngine;			//the game engine is the controller -- the view uses this reference to get information,												//pause or stop the game, and exit the office		private var _handbookData:HandbookData;	//To be implemented -- currently handbook text is hard coded					private var _pressConference:PressConferenceData; //Stores the press conference data by reading questions from an xml file									private var _alert:GameAlertBox;		//Box to display messages based on the state of the game				/* Screens created and displayed when the user clicks items in the office */				private var _handbook:HandbookView;		private var _globalFront:GlobalScreenView;	//Shows the bamboo bounding box and a few buttons seen in all screens		private var _mayorView:MayorView; 			//Object that displays the mayor based on the user's choices		private var _volcanoView:VolcanoView;		//Object that displays the volcano and makes sounds in response to the volcano activity		private var _emailScreenView:EmailScreenView; //Object that displays email screen when user clicks to read email		private var _gameView:GameEngineView;				private var _gpsSeismoView:GPSSeismoGame;	//Object that displays the helicopter game at the start		private var _pressConferenceView:PressConferenceView; //Object that shows the press conference				private var gpsExplanation:GPSDriver = new GPSDriver(); //Object that displays the GPS explanation when the user clicks on the GPS graph		private var seismoExplanation:SeismoDriver = new SeismoDriver(); //Object that displays the seismometer																		 //explanation when the user clicks on the graph							/* Buttons */		private var _pauseBtn:TinyGameButton;	//Used only in debug mode		private var _resumeBtn:TinyGameButton;	//Used only in debug mode		private var _helpBtn:TinyGameButton;	//Used only in debug mode				private var _gpsSeismoBtn:TinyGameButton;			//Used only in debug mode		private var _pressConferenceBtn:TinyGameButton;		//Used only in debug mode		private var _warnBtn:GameButtonBamboo;		private var _evacuteBtn:GameButtonBamboo;		private var _ohnoBtn:GameButtonBamboo;				private var buttonBox:Sprite;		private var quitBtn:TinyGameButton;		private var restartBtn:TinyGameButton;				private var _timer:Timer = new Timer(8000,0);			//Timer to create pause between volcano activity and press conference 8 second delay				//State variables //		private var _pause:Boolean = false;						//Set to true when game is paused			private var _playedGPSSeismo:Boolean = false;			//set to false until GPS game is played		private var _heldPressConference:Boolean = false;		//set to false until Press conference 		private var _debug:Boolean = false;						//Set to true to show some debug buttons		private var startTime:Boolean = false;					//Set to false until volcano wakes up		// Sounds		private var _player:SoundPlayer;							//Object to load and play mp3 files		private var _email:SoundPlayer = new SoundPlayer();			//Object to play sound on new email		//var _help:GameHelpBox;		//var _showHelp:Boolean = true;		//var _phoneTicks:int = 0;		//private var _mid:TextField;				//Text Fields that are updated to show the score		private var _budget:GameScoreTextField;		private var _preparation:GameScoreTextField;		private var _popularity:GameScoreTextField;				private var _popValue:GameValueTextField;		private var _budgetValue:GameValueTextField;		private var _prepValue:GameValueTextField;						//private var _emailBox:Sprite;			/* Videos */		private var my_FLVPlyb:FLVPlayback;		private var _FLVMonitorPlybk:FLVPlayback;						/*Tweens for effects */		private var fadeTween:Tween;		private var fadeTween1:Tween;		private var fadeTween2:Tween;		private var fadeTween3:Tween;		private var fadeTween4:Tween;		private var fadeTween5:Tween;		private var bounceTween:Tween;										public function OfficeScreenView (game:GameEngine, volcanoView:VolcanoView, volcano:VolcanoData, town:TownData, mayor:MayorData, front:GlobalScreenView, gameView:GameEngineView, emailData:EmailData, monitor:MonitorData, pressConference:PressConferenceData, handbook:HandbookData){						//store loval variables			_game = game;			_volcano = volcano;			_town = town;			_volcanoView = volcanoView;			_mayor = mayor;			_globalFront = front;			_gameView = gameView;			_monitor = monitor;			_handbookData = handbook;			_mayorView = new MayorView(GameText.BACK_X + 50, GameText.BACK_Y + 50, _mayor); //pas mayor data to may view			_emailData = emailData;			_emailData.addEventListener(EmailEvent.YOU_HAVE_MAIL, onNewMail);			_pressConference = pressConference;			init();					}				public function init(){						//This code loads assets from the disk			_email.loadSound(GameText.SOUNDS_FOLDER  + "email.mp3"); 						_back = new DisplayGraphicsFiles() ;			_back.loadFile(GameText.PICTURE_DIRECTORY + GameText.OFFICE_BACKGROUND);			_back.x = -5;			_back.y = -5;						_lowerBorder = new DisplayGraphicsFiles();			_lowerBorder.loadFile(GameText.PICTURE_DIRECTORY + GameText.LOWER_BORDER);			_lowerBorder.y = GameText.LOWER_BORDER_Y;			_lowerBorder.x = GameText.LOWER_BORDER_X;						_parrot.x = 350;			_parrot.y = 225;			_parrot.addEventListener(MouseEvent.CLICK, onClickParrot);			_parrot.buttonMode = true;			_parrot.button = true;						_bobbleHead = new DisplayGraphicsFiles();			_bobbleHead.loadFile(GameText.PICTURE_DIRECTORY + GameText.BOBBLE_HEAD, true);			_bobbleHead.x = 600;			_bobbleHead.y = 240;						_handBook = new DisplayGraphicsFiles();			_handBook.loadFile(GameText.PICTURE_DIRECTORY + GameText.HANDBOOK);			_handBook.x = 475;			_handBook.y = 200;			_handBook.addEventListener(MouseEvent.CLICK, onClickHandbook);			_handBook.buttonMode = true;			_handBook.button = true;						my_FLVPlyb = new FLVPlayback();			my_FLVPlyb.x = 60;			my_FLVPlyb.y = 90;			my_FLVPlyb.width = 900; //stage.width;			my_FLVPlyb.height = 380; //stage.height;						my_FLVPlyb.source = "movies/bookAnimation.flv";			my_FLVPlyb.stop();						_FLVMonitorPlybk = new FLVPlayback();			_FLVMonitorPlybk.x = 650;			_FLVMonitorPlybk.y = 145;			_FLVMonitorPlybk.width = 203; //stage.width;			//_FLVMonitorPlybk.height = 120; //stage.			//_FLVMonitorPlybk.skin = "SkinOverAll.swf";			_FLVMonitorPlybk.stop();						addChild(_volcanoView);			addChild(_back);			addChild(_mayorView);			addChild(_lowerBorder);						drawMonitors();						addChild(_handBook);			addChild(_parrot);			addChild(_bobbleHead);						_budget = new GameScoreTextField( "money: ");			_popularity = new GameScoreTextField("popularity: ");			_preparation = new GameScoreTextField("evacuation readiness: ");			addChild(_budget);			addChild(_popularity);			addChild(_preparation);					_budget.y = 455;			_popularity.y = 452;			_preparation.y = 455;					_budget.x = 0;			_popularity.x = 265;			_preparation.x = 580;						_warnBtn = new  GameButtonBamboo(25, 470, 50, 100, GameText.EVACUATION_WARNING);			_warnBtn.addEventListener(MouseEvent.CLICK, onWarn);			_warnBtn.disabled = true;			addChild(_warnBtn);									_evacuteBtn = new GameButtonBamboo(575, 470, 50, 100, GameText.EVACUATE_ISLAND);			_evacuteBtn.addEventListener(MouseEvent.CLICK, onEvacuate);			addChild(_evacuteBtn);			_evacuteBtn.disabled = true;						buildScoreBar();						_emailData.addEventListener(EmailEvent.YOU_HAVE_MAIL, onNewMail);			_emailData.addEventListener(EmailUpdateEvent.REPLY_YES, onEmailUpdate);			_emailData.addEventListener(EmailUpdateEvent.REPLY_NO, onEmailUpdate);									_mailIcon = new DisplayGraphicsFiles();			_mailIcon.loadFile(GameText.PICTURE_DIRECTORY + GameText.MAIL_ICON);			addChild(_mailIcon);			_mailIcon.addEventListener(MouseEvent.CLICK, toEmailScreen);			_mailIcon.x = 625;			_mailIcon.y = 200;			addChild(_gameView);															_emailScreenView = new EmailScreenView(this, _game, _emailData);						leftBorder = new DisplayGraphicsFiles() ;			leftBorder.loadFile(GameText.PICTURE_DIRECTORY + GameText.VERTICAL_BORDER);			addChild(leftBorder);			rightBorder = new DisplayGraphicsFiles();			rightBorder.loadFile(GameText.PICTURE_DIRECTORY + GameText.VERTICAL_BORDER);			addChild(rightBorder);			rightBorder.x = GameText.RIGHT_BORDER_X;			upperBorder = new DisplayGraphicsFiles();			upperBorder.loadFile(GameText.PICTURE_DIRECTORY + GameText.HORIZONTAL_BORDER);			addChild(upperBorder);						_handbook = new HandbookView(this, _handbookData);						addChild(_FLVMonitorPlybk);						_gpsSeismoBtn = new TinyGameButton(150, 50, 100, 100, "GPS Seismo Game");			_pressConferenceBtn = new TinyGameButton(150, 100, 100, 100, "Press Conference");						_pressConferenceView = new PressConferenceView();								_volcano.addEventListener(VolcanoWakesUpEvent.VOLCANO_WAKES_UP, onVolcanoWakesUp);			_volcano.addEventListener(VolcanoEruptsEvent.VOLCANO_ERUPTS, onVolcanoErupts);						_xVal = GameText.BACK_X + 7;			_yVal = GameText.BACK_Y;			_fadeWidth = 135;			_fadeHeight = 245;						with (rectBox.graphics) {			             				lineStyle(1, GameText.BROWN);                beginFill(GameText.BROWN, 1.0);                drawRect(20, GameText.LOWER_BORDER_Y + 128, 900, 32 );                endFill();         }		 		 rectBox.filters = [new DropShadowFilter()];								quitBtn = new TinyGameButton(GameText.RIGHT_BORDER_X - 100, GameText.LOWER_BORDER_Y + 130, 40, 100, GameText.EXIT_BTN);		addChild(quitBtn);					quitBtn.addEventListener(MouseEvent.CLICK, onQuit);				restartBtn = new TinyGameButton(GameText.RIGHT_BORDER_X - 200, GameText.LOWER_BORDER_Y + 130, 40, 100, GameText.RESTART_BTN);		addChild(restartBtn);					restartBtn.addEventListener(MouseEvent.CLICK, onRestart);								}				/*		 * Fades screen to black on eruption 		 */		private function onVolcanoErupts(e:VolcanoEruptsEvent){			trace("Volcano has erupted -- start fade");			pause();						_fadeBox = new Sprite();			addChild(_fadeBox);						with (_fadeBox.graphics) {                				//lineStyle(2, 0x000000);				beginFill(0x000000, 0.8);                drawRect(stage.x , stage.y, stage.width - 40, stage.height - 40);                endFill();			}            						fadeTween5 = new Tween(_fadeBox, "alpha", Strong.easeIn, 0, 1, 10, true);			fadeTween5.addEventListener(TweenEvent.MOTION_FINISH, motionFinishHandler5);						TransitionManager.start(_parrot, {type:Rotate, direction:Transition.IN, duration:3, easing:Strong.easeInOut, ccw:false, degrees:720});											}				/*		 * Adds uh oh button at the end of the fade		 */		private function motionFinishHandler5(TweenEvent):void{						//to do add UH OH! sound effect			_ohnoBtn = new GameButtonBamboo(stage.width/2 -100, stage.height/2, 50, 100, "uh oh!");			_ohnoBtn.addEventListener(MouseEvent.CLICK, onUhOh);						addChild(_ohnoBtn);						}				/*		 * Callback for uh oh		 * closes the office and opens the final screen		 */		private function onUhOh(MouseEvent):void{						pause();			_game.onExitGameScreen();			_game.onEnterFinalScreen();							}				/*		 * Callback for when volcano wakes up		 * loads new email file		 * starts a timer for 8 seconds to call press conference.		 */				private function onVolcanoWakesUp(e:VolcanoWakesUpEvent):void{												if(_mailIcon.parent == this){								removeChild(_mailIcon);			}						_emailData.LoadXMLFile("text/AfterExplosion.xml");						_timer.start();			_timer.addEventListener(TimerEvent.TIMER, callPressConference);			startTime = true;														}				/**		 *  Timer callback after volcano wakes up		 *  opens the alert box with press conference message		 */				public function callPressConference(e:TimerEvent):void{			_timer.stop();			pause();			startTime = false;						if(_heldPressConference == true){				return;			}						_alert = new GameAlertBox();			addChild(_alert);			_alert.loadText(GameText.TEXT_DIRECTORY + "afterBang.txt");			_alert.x = 200;			_alert.y  = 70;			_alert.oneButton = true;						_alert.addEventListener(PlayerDecidesEvent.CHOOSE_YES, onStartPressConference);			_alert.textYes = "press conference";											}				/*		 * Callback from alert box...		 * Opens press conference screen		 */				public function pressConference(e:MouseEvent):void{						trace("Clicked press conference");			pause();						removeChild(_mayorView);						_pressConferenceView.initPressConference(this, _mayorView, _pressConference);			addChild(_pressConferenceView);		}				/*		 * Callback from alert box to play helicopter game		 */		public function playGPSSeismoGame(e:PlayerDecidesEvent):void{							if(_evacuteBtn.parent == this){				removeChild(_evacuteBtn );			}			if(_warnBtn.parent == this){				removeChild(_warnBtn);			}			if(_mailIcon.parent == this){								removeChild(_mailIcon);			}						if(_debug == false){				addChild(_gpsSeismoView);				pause();			}			else{								 _playedGPSSeismo = true;								start();			}																				}				public function onClickPlayGPSSeismoGame():void{						//playGPSSeismoGame();					}				/*			Callback when player ends helipcopter game						Updates the prepardness based on 1/20 times the helicopter game score.				*/				public function onEndGPSSeismo(e:HelicopterGameOverEvent):void{			removeChild(_gpsSeismoView)			 _playedGPSSeismo = true;			 onEnterGameScreen();			 			 _alert = new GameAlertBox();			 _alert.x = 200;			 _alert.y  = 40;			 addChild(_alert);			 _alert.loadText(GameText.TEXT_DIRECTORY + "afterHelicopter.txt");			 _alert.textYes = "ok";			 _alert.oneButton = true;			 _alert.addEventListener(PlayerDecidesEvent.CHOOSE_YES, okClicked);			 _town.changePrepardness(Math.round(_gpsSeismoView.score/20));			 pause();									}						public function okClicked(e:PlayerDecidesEvent):void{			start();		}				/*					Callback for when player clicks on email icon			Pauses the game and opens email screen			Disabled right after the first explosion.				*/				public function toEmailScreen(e:MouseEvent):void{						if(_mailIcon.parent == this){				removeChild(_mailIcon);			}						if(_timer.running == true){				return;			}			addChild(_emailScreenView);			_emailScreenView.onEnterEmailScreen();			pause();																	}				/*			Callback when player clicks done.			Function called to clean up email -- update could be changed to event						*/				public function onExitEmailScreen():void{							 exitEmailScreen();					}				/*			Game is paused when player moves to another screen -- this function pauses all the moving parts						*/				 private function pause(){						_game.pause();			_seismo.pause();			_gpsMonitor.pause();									if(_timer.running == true  ){								_timer.stop();				startTime = true;			}						//Remove the mail icon so user can't open email while game is paused			if(_mailIcon != null && _mailIcon.parent == this){				removeChild(_mailIcon);			}									if(_evacuteBtn.parent == this){				removeChild(_evacuteBtn );			}			if(_warnBtn.parent == this){				removeChild(_warnBtn);			}						 		 }		 		 		 /* 		 		 	Game restarts when user exits other screens. 			Method used to restart and add buttons at the end of a paused activity.		 		 		 */		 		 private function start(){			 _game.start();			_seismo.start();			_gpsMonitor.start();									if(_mailIcon != null && _emailData.hasMail == true){				addChild(_mailIcon);			}						if(startTime == true){				_timer.start();				startTime = false;			}						addChild(_evacuteBtn );			addChild(_warnBtn);						//TransitionManager.start(_parrot, {type:Rotate, direction:Transition.IN, duration:3, easing:Strong.easeInOut, ccw:false, degrees:720});								 }				private function exitEmailScreen():void{						trace("On exit email screen from the office...");			removeChild(_emailScreenView);			start();								}				public function onEmailUpdate(e:EmailUpdateEvent):void{			//To do switch name of icon loaded....					}				public function onNewMail(e:EmailEvent):void{			if(_timer.running){				return;			}			trace("Email event dispatched");			addChild(_mailIcon);			_mailIcon.addEventListener(MouseEvent.CLICK, toEmailScreen);			_mailIcon.x = 625;			_mailIcon.y = 200;			addChild(_gameView);					}				function motionFinishHandler(event:TweenEvent):void{				Tween(event.currentTarget).yoyo();			}				public function buildScoreBar():void{					if(_budgetValue != null && _budgetValue.parent == this && _popValue.parent == this && _prepValue.parent == this ){		    removeChild(_budgetValue);			removeChild(_popValue);			removeChild(_prepValue);		}				_budgetValue = new GameValueTextField(_game.moneyText);		_prepValue   = new GameValueTextField(_game.prepardnessText);		_popValue    = new GameValueTextField(_game.popularityText);				_prepValue.fontName = webFont.fontName;		_popValue.fontName = webFont.fontName;				addChild(_budgetValue);		addChild(_popValue);		addChild(_prepValue);				_budgetValue.y = 455;		_popValue.y = 450;		_prepValue.y = 455;				_budgetValue.x = 90;		_popValue.x = 365;		_prepValue.x = 725;				addChild(_budget);		addChild(_popularity);		addChild(_preparation);							}				/*			Callback when user clix parrot			Spins the bird						*/				public function onClickParrot(e:MouseEvent):void{						TransitionManager.start(_parrot, {type:Rotate, direction:Transition.IN, duration:3, easing:Strong.easeInOut, ccw:false, degrees:720});								}				public function onClickHandbook(e:MouseEvent):void{						if(_timer.running){				return;			}			_fadeBox = new Sprite();	 		_fadeRect = new Rectangle();			addChild(_fadeBox);			addChild(my_FLVPlyb);						_town.changePrepardness(10);						with (_fadeBox.graphics) {                				lineStyle(2, 0x000000);				beginFill(0x000000, 0.8);                drawRect(_xVal, _yVal, stage.width - _fadeWidth, stage.height -  _fadeHeight);                endFill();			}            			my_FLVPlyb.play();			my_FLVPlyb.addEventListener(VideoEvent.COMPLETE, complete_listener);						fadeTween2 = new Tween(_fadeBox, "alpha", Strong.easeIn, 0, 1, 1, true);						_game.pause();			_seismo.pause();			_gpsMonitor.pause();						if(_evacuteBtn.parent == this){				removeChild(_evacuteBtn );			}			if(_warnBtn.parent == this){				removeChild(_warnBtn);			}		}	/*		This is the callback that opens the handbook after the 		FLV animation plays.				*/			function complete_listener(e:VideoEvent):void{				if(my_FLVPlyb.parent == this){			removeChild(my_FLVPlyb);		}		addChild(_handbook);		_handbook.onOpenHandbook();			}	/*			Callback when user decides to exit the book.			*/		public function closeBook(){						removeChild(_handbook);			removeChild(_fadeBox);			_game.start();			_seismo.start();			_gpsMonitor.start();						addChild(_evacuteBtn);			addChild(_warnBtn);		}										public function set mayor(mayor:MayorData){						_mayor = mayor;			_mayorView.mayor = _mayor;							}				public function onEnterGameScreen(){									_mayorView.updateDisplay();													if(_playedGPSSeismo == false){								_alert = new GameAlertBox();				_alert.x = 200;				_alert.y  = 40;				addChild(_alert);				_alert.loadText(GameText.TEXT_DIRECTORY + "enterGame.txt");				_alert.addEventListener(PlayerDecidesEvent.CHOOSE_YES, playGPSSeismoGame);				trace("town not warned...");				_alert.textYes = "to the helicopter";				_alert.oneButton = true;							}							else{						_game.start();			_seismo.start();			_gpsMonitor.start();			_mayorView.updateDisplay();						if(_game.warned == false){								_warnBtn.label = GameText.EVACUATION_WARNING;							}			else{				_warnBtn.label = GameText.CANCEL_WARNING;							}						_warnBtn.addEventListener(MouseEvent.CLICK, onWarn);						//fadeTween4 = new Tween(_emailBox, "alpha", Strong.easeIn, 0, 1, 1, true);			//fadeTween4.addEventListener(TweenEvent.MOTION_FINISH, motionFinishHandler);			}						if(_gpsSeismoView == null){				_gpsSeismoView = new GPSSeismoGame(stage);				_gpsSeismoView.addEventListener(HelicopterGameOverEvent.HELICOPTER_GAME_COMPLETE, onEndGPSSeismo);				_gpsSeismoView.x = GameText.BACK_X;				_gpsSeismoView.y = GameText.BACK_Y;							}																		}				/*					This creates the two graphs in the office.								*/					private function drawMonitors(){						seismoRect= new Rectangle(449, 75, 190, 110);			gpsRect = new Rectangle(692, 75, 190, 108);			seismoBox = new Sprite();			gpsBox = new Sprite();						with (gpsBox.graphics) {                               beginFill(0x00FFFF, 1.0);                drawRect(gpsRect.x, gpsRect.y, gpsRect.width, gpsRect.height);                endFill();            }						_back.addChild(gpsBox);						with (seismoBox.graphics) {                               beginFill(0xFFFFFF, 1.0);                drawRect(seismoRect.x, seismoRect.y, seismoRect.width, seismoRect.height);                endFill();            }						_back.addChild(seismoBox);						_seismo = new SeismoGraph(seismoRect, _volcano);			_gpsMonitor = new GPSMonitor(gpsRect, _volcano);						_back.addChild(_gpsMonitor);			_back.addChild(_seismo);						_seismo.addEventListener(MouseEvent.CLICK, onClickSeismo);			_gpsMonitor.addEventListener(MouseEvent.CLICK, onClickGPS);						seismoExplanation.addEventListener(GameEvent.CHANGE, onEndSeismo);			gpsExplanation.addEventListener(GameEvent.CHANGE, onEndGPS);											}				/*					These is the callback when the player ends the GPS explanation				*/				private function onEndGPS(ge:GameEvent):void{						removeChild(gpsExplanation);						_town.changePrepardness(10);						removeChild(_fadeBox);						start();		}				/*					These is the callback when the player ends the Seismometer explanation				*/						private function onEndSeismo(ge:GameEvent):void{			removeChild(seismoExplanation);						_town.changePrepardness(10);						start();						removeChild(_fadeBox);		}				/*			Callback for when the user clicks the seismometer.			Shows an explantation of the graph.								*/		private function onClickSeismo(me:MouseEvent):void{									pause();			_fadeBox = new Sprite();			addChild(_fadeBox);			_town.changePrepardness(10);			trace("Clicked Seimometer monitor");						with (_fadeBox.graphics) {                				lineStyle(2, 0x99ff99);				beginFill( 0x99CC99, 1.0);                drawRect(_xVal, _yVal, stage.width - _fadeWidth, stage.height -  _fadeHeight);                endFill();			}						addChild(seismoExplanation);			seismoExplanation.start();            		}				/*					Callback for when user clicks the GPS monitor						Opens up an explanation of the graph.						*/				private function onClickGPS(me:MouseEvent):void{						_town.changePrepardness(10);			pause();			trace("Clicked GPS monitor");						_fadeBox = new Sprite();			addChild(_fadeBox);						with (_fadeBox.graphics) {                				lineStyle(2, 0x99CC66);				beginFill( 0x99ff66, 1.0);                drawRect(_xVal, _yVal, stage.width - _fadeWidth, stage.height -  _fadeHeight);                endFill();			}						addChild(gpsExplanation);			gpsExplanation.start();            		}				/*					Callback for when player clicks warning button						Pops up alert box 								*/				private function onWarn(MouseEvent):void {			if(_warnBtn.disabled == true){ //Do nothing if the button is disabled				return;			}						_alert = new GameAlertBox();			_alert.x = 200;			_alert.y  = 40;			addChild(_alert);						trace (_town.warned + " from phone warned..");						//Loads box to confirm warning						if(_town.warned == false){				_alert.loadText(GameText.TEXT_DIRECTORY + GameText.CHECK_WARNING);				_alert.addEventListener(PlayerDecidesEvent.CHOOSE_YES, onIssueWarning);				trace("town not warned...");			}			else{				_alert.loadText(GameText.TEXT_DIRECTORY + GameText.CHECK_CANCEL_WARNING);				_alert.addEventListener(PlayerDecidesEvent.CHOOSE_YES, onCancelWarning);							}						_alert.addEventListener(PlayerDecidesEvent.CHOOSE_NO, onNotYet);			_warnBtn.label = GameText.EVACUATION_WARNING;		}				private function onNotYet(PlayerDecidesEvent):void{						//nothing to do here yet					}				/*			Callback when player chooses not to cancel warning 			Deprecated for now.				*/		private function onCancelWarning(e:PlayerDecidesEvent):void{									_game.cancelVolcanoEvacuationWarning();			_warnBtn.label = GameText.EVACUATION_WARNING;		}						private function onIssueWarning(e:PlayerDecidesEvent):void{									_game.issueVolcanoEvacuationWarning();						try{				_FLVMonitorPlybk.source = GameText.MOVIES_DIRECTORY + _monitor.getVideoFile();				addChild(_FLVMonitorPlybk);				_FLVMonitorPlybk.addEventListener(VideoEvent.COMPLETE, onWarningComplete);				_FLVMonitorPlybk.play();				pause();							}			catch(e:Error){								warningComplete();			}												if(_town.warned == true){								_evacuteBtn.disabled = false;				_warnBtn.disabled = true;							_emailData.LoadXMLFile("text/afterWarningEmails.xml");				_playedGPSSeismo = true;							}		}				/*					Callbacks after warning video ends						*/				private function onWarningComplete(e:VideoEvent):void{						warningComplete();								}						private function warningComplete():void{						if(_FLVMonitorPlybk.parent == this){				removeChild(_FLVMonitorPlybk);			}									if(_heldPressConference == false){					_alert = new GameAlertBox();					addChild(_alert);				_alert.loadText(GameText.TEXT_DIRECTORY + "pressConference.txt");				_alert.x = 200;				_alert.y  = 70;							_alert.addEventListener(PlayerDecidesEvent.CHOOSE_YES, onStartPressConference);				_alert.addEventListener(PlayerDecidesEvent.CHOOSE_NO, onNoPress);							trace("Press conference");				pause();			}			else{								start();			}								}				/*					Callback to start pres conference						*/				private function onStartPressConference(e:PlayerDecidesEvent):void{						trace("Press conference");			pause();						removeChild(_mayorView); //Moves the mayor from the office						_pressConferenceView.initPressConference(this, _mayorView, _pressConference);			addChild(_pressConferenceView);						//Removes the two buttons so they can't be clicked during the press conference			if(_evacuteBtn.parent == this){				removeChild(_evacuteBtn );			}			if(_warnBtn.parent == this){				removeChild(_warnBtn);			}					}				/*					Deprecated for when player had option to postpone press conference				*/				private function onNoPress(e:PlayerDecidesEvent):void{						start();					}				/*					Generic video complete callback -- remvoves the player and restarts the game				*/				private function onVideoComplete(e:VideoEvent){						if(_FLVMonitorPlybk.parent == this){				removeChild(_FLVMonitorPlybk);			}						start();					}				/*			Callback when user clicks Evacuate				*/				private function  onOrderEvacuation(PlayerDecidesEvent):void{						_game.evacuateTown(); //tells the game engine Mayor has ordered evacuation						pause();						try{				_FLVMonitorPlybk.source = GameText.MOVIES_DIRECTORY + _monitor.getVideoFile(); //loads evacuation video				addChild(_FLVMonitorPlybk);				_FLVMonitorPlybk.addEventListener(VideoEvent.COMPLETE, onVideoComplete);				_FLVMonitorPlybk.play();						}			catch(e:Error){								GameComplete(); //Fallback if video doesn't load			}									if(_town.evacuated == true){				pause();								_FLVMonitorPlybk.addEventListener(VideoEvent.COMPLETE, onGameComplete);				_evacuteBtn.disabled = true;				removeChild(_mayorView);			}					}				/*			Callback for when the evacuation video ends			Exits the screen and opens the Island from a Distance screen				*/				private function onGameComplete(VideoEvent):void{						GameComplete();		}				private function GameComplete():void{						_game.onExitGameScreen();			_game.onEnterIslandFromADistanceScreen();		}		/*			Callback for the evacuation -- Opens an alert box to decide if the player really wants to order the evacuation.						*/				private function onEvacuate(MouseEvent):void {			if(_evacuteBtn.disabled == false){			_alert = new GameAlertBox();			addChild(_alert);			_alert.loadText(GameText.TEXT_DIRECTORY + GameText.CHECK_EVACUATION_ORDER);			_alert.x = 200;			_alert.y  = 70;						_alert.addEventListener(PlayerDecidesEvent.CHOOSE_YES, onOrderEvacuation);			_alert.addEventListener(PlayerDecidesEvent.CHOOSE_NO, onNotYet);			}		}				/*			Callback for exiting press conference			Puts the mayor back onto the screen			Activates the warn button.			*/					public function onExitPressConference():void{			removeChild(_pressConferenceView);						start();						addChild(_mayorView);						_mayorView.x = GameText.BACK_X + 50;			_mayorView.y = GameText.BACK_Y + 50;											_heldPressConference = true;						_warnBtn.disabled = false;						onEnterGameScreen();		}				public function onQuit(MouseEvent):void{				navigateToURL(new URLRequest("../index.html"), "_self");			}			/*		Callback for restart button -- reloads program		*/		public function onRestart(MouseEvent):void{				navigateToURL(new URLRequest("index.html"), "_self");		System.exit(0);	}	}		}